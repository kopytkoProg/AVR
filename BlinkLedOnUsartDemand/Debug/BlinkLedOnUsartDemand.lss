
BlinkLedOnUsartDemand.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000003a0  00000434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  00800100  00800100  00000434  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004b1  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ee  00000000  00000000  000009ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025a  00000000  00000000  00000b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ec  00000000  00000000  00000df8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000278  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004fb  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00001757  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	96 c1       	rjmp	.+812    	; 0x34a <__vector_14>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	2a c1       	rjmp	.+596    	; 0x27a <__vector_18>
  26:	44 c0       	rjmp	.+136    	; 0xb0 <__vector_19>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a6 34       	cpi	r26, 0x46	; 70
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	a3 d0       	rcall	.+326    	; 0x198 <main>
  52:	a4 c1       	rjmp	.+840    	; 0x39c <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <crc>:
//--------------------------------------------------------------
//--------------------------------------------------------------
uint8_t crc (char *s, uint8_t length)
{
	uint8_t crc = 0;
	for (uint8_t i = 0; i < length; i++) crc += *(s+i);
  56:	66 23       	and	r22, r22
  58:	59 f0       	breq	.+22     	; 0x70 <crc+0x1a>
  5a:	28 2f       	mov	r18, r24
  5c:	e8 2f       	mov	r30, r24
  5e:	f9 2f       	mov	r31, r25
}
//--------------------------------------------------------------
//--------------------------------------------------------------
uint8_t crc (char *s, uint8_t length)
{
	uint8_t crc = 0;
  60:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < length; i++) crc += *(s+i);
  62:	91 91       	ld	r25, Z+
  64:	89 0f       	add	r24, r25
  66:	9e 2f       	mov	r25, r30
  68:	92 1b       	sub	r25, r18
  6a:	96 17       	cp	r25, r22
  6c:	d0 f3       	brcs	.-12     	; 0x62 <crc+0xc>
  6e:	08 95       	ret
}
//--------------------------------------------------------------
//--------------------------------------------------------------
uint8_t crc (char *s, uint8_t length)
{
	uint8_t crc = 0;
  70:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < length; i++) crc += *(s+i);
	return crc;
}
  72:	08 95       	ret

00000074 <usart_inicjuj>:
//--------------------------------------------------------------
void usart_inicjuj(void)
{

	// set computed by 'setbaud' values
	UBRR0H = UBRRH_VALUE;
  74:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
  78:	83 e3       	ldi	r24, 0x33	; 51
  7a:	80 93 c4 00 	sts	0x00C4, r24
	#if USE_2X
	UCSR0A |=  (1<<U2X0);
	#else
	UCSR0A &= ~(1<<U2X0);
  7e:	e0 ec       	ldi	r30, 0xC0	; 192
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	80 81       	ld	r24, Z
  84:	8d 7f       	andi	r24, 0xFD	; 253
  86:	80 83       	st	Z, r24
	#endif
	

	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
  88:	86 e0       	ldi	r24, 0x06	; 6
  8a:	80 93 c2 00 	sts	0x00C2, r24
	// 8 bits
	// 1 bit stop
	// parity none
	UCSR0B = (1<<TXEN0) | (1<<RXEN0) | (1<<RXCIE0);
  8e:	88 e9       	ldi	r24, 0x98	; 152
  90:	80 93 c1 00 	sts	0x00C1, r24
  94:	08 95       	ret

00000096 <can_send>:
}
//--------------------------------------------------------------
uint8_t volatile data_to_send = 0;
uint8_t can_send(void)
{
	return ((UCSR0A & (1<<UDRE0)) && !data_to_send);
  96:	80 91 c0 00 	lds	r24, 0x00C0
  9a:	85 ff       	sbrs	r24, 5
  9c:	07 c0       	rjmp	.+14     	; 0xac <can_send+0x16>
  9e:	90 91 01 01 	lds	r25, 0x0101
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	99 23       	and	r25, r25
  a6:	19 f0       	breq	.+6      	; 0xae <can_send+0x18>
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	08 95       	ret
  ac:	80 e0       	ldi	r24, 0x00	; 0
}
  ae:	08 95       	ret

000000b0 <__vector_19>:
	}
}
//--------------------------------------------------------------
//--------------------------------------------------------------
ISR(USART_UDRE_vect)
{
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	2f 93       	push	r18
  bc:	3f 93       	push	r19
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	ef 93       	push	r30
  c4:	ff 93       	push	r31
	if(usart_tx_bufor_ind < TX_BUFFER_SIZE && data_to_send > 0)
  c6:	80 91 24 01 	lds	r24, 0x0124
  ca:	90 91 25 01 	lds	r25, 0x0125
  ce:	80 97       	sbiw	r24, 0x20	; 32
  d0:	d8 f4       	brcc	.+54     	; 0x108 <__vector_19+0x58>
  d2:	80 91 01 01 	lds	r24, 0x0101
  d6:	88 23       	and	r24, r24
  d8:	b9 f0       	breq	.+46     	; 0x108 <__vector_19+0x58>
	{
		UDR0 = usart_tx_bufor[usart_tx_bufor_ind++];
  da:	80 91 24 01 	lds	r24, 0x0124
  de:	90 91 25 01 	lds	r25, 0x0125
  e2:	9c 01       	movw	r18, r24
  e4:	2f 5f       	subi	r18, 0xFF	; 255
  e6:	3f 4f       	sbci	r19, 0xFF	; 255
  e8:	30 93 25 01 	sts	0x0125, r19
  ec:	20 93 24 01 	sts	0x0124, r18
  f0:	fc 01       	movw	r30, r24
  f2:	ee 5f       	subi	r30, 0xFE	; 254
  f4:	fe 4f       	sbci	r31, 0xFE	; 254
  f6:	80 81       	ld	r24, Z
  f8:	80 93 c6 00 	sts	0x00C6, r24
		data_to_send--;
  fc:	80 91 01 01 	lds	r24, 0x0101
 100:	81 50       	subi	r24, 0x01	; 1
 102:	80 93 01 01 	sts	0x0101, r24
 106:	0b c0       	rjmp	.+22     	; 0x11e <__vector_19+0x6e>
	}
	else
	{
		usart_tx_bufor_ind = 0;
 108:	10 92 25 01 	sts	0x0125, r1
 10c:	10 92 24 01 	sts	0x0124, r1
		UCSR0B &= ~(1<<UDRIE0);												//wy³¹cz przerwania pustego bufora nadawania
 110:	e1 ec       	ldi	r30, 0xC1	; 193
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	8f 7d       	andi	r24, 0xDF	; 223
 118:	80 83       	st	Z, r24
		data_to_send = 0;
 11a:	10 92 01 01 	sts	0x0101, r1
	}
}
 11e:	ff 91       	pop	r31
 120:	ef 91       	pop	r30
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	3f 91       	pop	r19
 128:	2f 91       	pop	r18
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <send_buffer>:
//--------------------------------------------------------------
void send_buffer(uint8_t byte_to_send)
{
	data_to_send = byte_to_send;
 134:	80 93 01 01 	sts	0x0101, r24
	UCSR0B |= (1<<UDRIE0);
 138:	e1 ec       	ldi	r30, 0xC1	; 193
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	80 62       	ori	r24, 0x20	; 32
 140:	80 83       	st	Z, r24
 142:	08 95       	ret

00000144 <send_data>:
		cp_to_buffer(usart_tx_bufor, s);
		send_buffer(length);
	}
}
void send_data (char *s, uint8_t length)
{
 144:	1f 93       	push	r17
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ec 01       	movw	r28, r24
 14c:	16 2f       	mov	r17, r22
	if (can_send()){
 14e:	a3 df       	rcall	.-186    	; 0x96 <can_send>
 150:	88 23       	and	r24, r24
 152:	99 f0       	breq	.+38     	; 0x17a <send_data+0x36>
		for (uint8_t i = 0; i < length; i++) usart_tx_bufor[i] = *(s+i);
 154:	11 23       	and	r17, r17
 156:	79 f0       	breq	.+30     	; 0x176 <send_data+0x32>
 158:	fe 01       	movw	r30, r28
 15a:	a2 e0       	ldi	r26, 0x02	; 2
 15c:	b1 e0       	ldi	r27, 0x01	; 1
 15e:	9e 01       	movw	r18, r28
 160:	2f 5f       	subi	r18, 0xFF	; 255
 162:	3f 4f       	sbci	r19, 0xFF	; 255
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	81 0f       	add	r24, r17
 168:	28 0f       	add	r18, r24
 16a:	31 1d       	adc	r19, r1
 16c:	91 91       	ld	r25, Z+
 16e:	9d 93       	st	X+, r25
 170:	e2 17       	cp	r30, r18
 172:	f3 07       	cpc	r31, r19
 174:	d9 f7       	brne	.-10     	; 0x16c <send_data+0x28>
		send_buffer(length);
 176:	81 2f       	mov	r24, r17
 178:	dd df       	rcall	.-70     	; 0x134 <send_buffer>
	}
}
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	08 95       	ret

00000182 <init_timer0>:
	}
}
//--------------------------------------------------------------
void init_timer0(void)
{
	TCCR0A |= (1<<WGM01);													// CTC Mode
 182:	84 b5       	in	r24, 0x24	; 36
 184:	82 60       	ori	r24, 0x02	; 2
 186:	84 bd       	out	0x24, r24	; 36
	OCR0A = 39;																// TOP Value
 188:	87 e2       	ldi	r24, 0x27	; 39
 18a:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);													// compare match interrupt enable
 18c:	ee e6       	ldi	r30, 0x6E	; 110
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	82 60       	ori	r24, 0x02	; 2
 194:	80 83       	st	Z, r24
 196:	08 95       	ret

00000198 <main>:
//--------------------------------------------------------------
int main(void)
{
	

	DDRB |= _BV(DDB0);														// set out PB0 (for diode)
 198:	20 9a       	sbi	0x04, 0	; 4
	
	init_timer0();															// init timer
 19a:	f3 df       	rcall	.-26     	; 0x182 <init_timer0>
	usart_inicjuj();														// initialize USART (RS-232)
 19c:	6b df       	rcall	.-298    	; 0x74 <usart_inicjuj>
	sei();																	// Enables interrupts
 19e:	78 94       	sei
	PORTB |= (_BV(PB0));
 1a0:	28 9a       	sbi	0x05, 0	; 5
	
	while(1)
	{
		
		
		if (usart_rx_bufor_ind >= 4 && usart_rx_bufor[MSG_DATA_LENGTH] + 4 == usart_rx_bufor_ind)	// great or equal 4 because packet always have address, command,  length and CRC
 1a2:	c8 e2       	ldi	r28, 0x28	; 40
 1a4:	d1 e0       	ldi	r29, 0x01	; 1
			
			if(usart_rx_bufor[usart_rx_bufor_ind-1] == crc(usart_rx_bufor, usart_rx_bufor_ind - 1)	// check CRC
			&& usart_rx_bufor[MSG_ADDRESS] == MY_ADDRESS)											// check Address
			{
				//char msg[] = {1, 2, 2, 'O', 'K', 0};
				usart_rx_bufor[0] = MASTER_ADDRESS;
 1a6:	ff 24       	eor	r15, r15
 1a8:	f3 94       	inc	r15
				usart_rx_bufor[usart_rx_bufor_ind - 1] = crc(usart_rx_bufor, usart_rx_bufor_ind - 1);
				
				send_data(usart_rx_bufor, usart_rx_bufor_ind);
				
				switch (usart_rx_bufor[MSG_COMMAND])
 1aa:	0f 2e       	mov	r0, r31
 1ac:	f7 e2       	ldi	r31, 0x27	; 39
 1ae:	cf 2e       	mov	r12, r31
 1b0:	f1 e0       	ldi	r31, 0x01	; 1
 1b2:	df 2e       	mov	r13, r31
 1b4:	f0 2d       	mov	r31, r0
	
	while(1)
	{
		
		
		if (usart_rx_bufor_ind >= 4 && usart_rx_bufor[MSG_DATA_LENGTH] + 4 == usart_rx_bufor_ind)	// great or equal 4 because packet always have address, command,  length and CRC
 1b6:	28 81       	ld	r18, Y
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	2c 5f       	subi	r18, 0xFC	; 252
 1bc:	3f 4f       	sbci	r19, 0xFF	; 255
 1be:	80 91 22 01 	lds	r24, 0x0122
 1c2:	90 91 23 01 	lds	r25, 0x0123
 1c6:	04 97       	sbiw	r24, 0x04	; 4
 1c8:	d0 f3       	brcs	.-12     	; 0x1be <main+0x26>
 1ca:	80 91 22 01 	lds	r24, 0x0122
 1ce:	90 91 23 01 	lds	r25, 0x0123
 1d2:	28 17       	cp	r18, r24
 1d4:	39 07       	cpc	r19, r25
 1d6:	99 f7       	brne	.-26     	; 0x1be <main+0x26>
		{																							//(End is when usart_rx_bufor_ind is equals 4(addr, cmd, length, crc) + usart_rx_bufor_ind[1](length of data field))
			
			if(usart_rx_bufor[usart_rx_bufor_ind-1] == crc(usart_rx_bufor, usart_rx_bufor_ind - 1)	// check CRC
 1d8:	00 91 22 01 	lds	r16, 0x0122
 1dc:	10 91 23 01 	lds	r17, 0x0123
 1e0:	60 91 22 01 	lds	r22, 0x0122
 1e4:	70 91 23 01 	lds	r23, 0x0123
 1e8:	61 50       	subi	r22, 0x01	; 1
 1ea:	86 e2       	ldi	r24, 0x26	; 38
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	33 df       	rcall	.-410    	; 0x56 <crc>
 1f0:	f8 01       	movw	r30, r16
 1f2:	eb 5d       	subi	r30, 0xDB	; 219
 1f4:	fe 4f       	sbci	r31, 0xFE	; 254
 1f6:	90 81       	ld	r25, Z
 1f8:	98 13       	cpse	r25, r24
 1fa:	32 c0       	rjmp	.+100    	; 0x260 <main+0xc8>
			&& usart_rx_bufor[MSG_ADDRESS] == MY_ADDRESS)											// check Address
 1fc:	80 91 26 01 	lds	r24, 0x0126
 200:	8a 30       	cpi	r24, 0x0A	; 10
 202:	71 f5       	brne	.+92     	; 0x260 <main+0xc8>
			{
				//char msg[] = {1, 2, 2, 'O', 'K', 0};
				usart_rx_bufor[0] = MASTER_ADDRESS;
 204:	f0 92 26 01 	sts	0x0126, r15
				usart_rx_bufor[usart_rx_bufor_ind - 1] = crc(usart_rx_bufor, usart_rx_bufor_ind - 1);
 208:	00 91 22 01 	lds	r16, 0x0122
 20c:	10 91 23 01 	lds	r17, 0x0123
 210:	80 91 22 01 	lds	r24, 0x0122
 214:	90 91 23 01 	lds	r25, 0x0123
 218:	6f ef       	ldi	r22, 0xFF	; 255
 21a:	68 0f       	add	r22, r24
 21c:	86 e2       	ldi	r24, 0x26	; 38
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	1a df       	rcall	.-460    	; 0x56 <crc>
 222:	f8 01       	movw	r30, r16
 224:	eb 5d       	subi	r30, 0xDB	; 219
 226:	fe 4f       	sbci	r31, 0xFE	; 254
 228:	80 83       	st	Z, r24
				
				send_data(usart_rx_bufor, usart_rx_bufor_ind);
 22a:	60 91 22 01 	lds	r22, 0x0122
 22e:	70 91 23 01 	lds	r23, 0x0123
 232:	86 e2       	ldi	r24, 0x26	; 38
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	86 df       	rcall	.-244    	; 0x144 <send_data>
				
				switch (usart_rx_bufor[MSG_COMMAND])
 238:	f6 01       	movw	r30, r12
 23a:	80 81       	ld	r24, Z
 23c:	82 30       	cpi	r24, 0x02	; 2
 23e:	31 f0       	breq	.+12     	; 0x24c <main+0xb4>
 240:	83 30       	cpi	r24, 0x03	; 3
 242:	31 f0       	breq	.+12     	; 0x250 <main+0xb8>
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	39 f4       	brne	.+14     	; 0x256 <main+0xbe>
				{
					case CMD_ENABLE_LED0:
					//--------------------------------------------------------------
					PORTB |= (_BV(PB0));
 248:	28 9a       	sbi	0x05, 0	; 5
					//--------------------------------------------------------------
					break;
 24a:	05 c0       	rjmp	.+10     	; 0x256 <main+0xbe>
					case CMD_DISABLE_LED0:
					//--------------------------------------------------------------
					PORTB &= ~(_BV(PB0));
 24c:	28 98       	cbi	0x05, 0	; 5
					//--------------------------------------------------------------
					break;
 24e:	03 c0       	rjmp	.+6      	; 0x256 <main+0xbe>
					case CMD_TOGGLE_LED0:
					//--------------------------------------------------------------
					PORTB ^= (_BV(PB0));
 250:	85 b1       	in	r24, 0x05	; 5
 252:	8f 25       	eor	r24, r15
 254:	85 b9       	out	0x05, r24	; 5
					break;
					default:
					/* UNKNOWN */
					break;
				}
				usart_rx_bufor_ind = 0;
 256:	10 92 23 01 	sts	0x0123, r1
 25a:	10 92 22 01 	sts	0x0122, r1
 25e:	ab cf       	rjmp	.-170    	; 0x1b6 <main+0x1e>
			}
			else
			{
				usart_rx_bufor_ind = 0;
 260:	10 92 23 01 	sts	0x0123, r1
 264:	10 92 22 01 	sts	0x0122, r1
 268:	a6 cf       	rjmp	.-180    	; 0x1b6 <main+0x1e>

0000026a <enable_timer0>:
	TIMSK0 |= (1<<OCIE0A);													// compare match interrupt enable
}
//--------------------------------------------------------------
void enable_timer0(void)
{
	TCCR0B |= (1 << CS02) | (1 << CS00);									// Prescaler
 26a:	85 b5       	in	r24, 0x25	; 37
 26c:	85 60       	ori	r24, 0x05	; 5
 26e:	85 bd       	out	0x25, r24	; 37
 270:	08 95       	ret

00000272 <disable_timer0>:
}
//--------------------------------------------------------------
void disable_timer0(void)
{
	TCCR0B &= ~((1 << CS02) | (1 << CS01) | (1 << CS00));					// Prescaler
 272:	85 b5       	in	r24, 0x25	; 37
 274:	88 7f       	andi	r24, 0xF8	; 248
 276:	85 bd       	out	0x25, r24	; 37
 278:	08 95       	ret

0000027a <__vector_18>:
//--------------------------------------------------------------
//--------------------------------------------------------------
//--------------------------------------------------------------
uint8_t recive_counter = 0;
ISR(USART_RX_vect)
{
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	2f 93       	push	r18
 286:	3f 93       	push	r19
 288:	4f 93       	push	r20
 28a:	5f 93       	push	r21
 28c:	6f 93       	push	r22
 28e:	7f 93       	push	r23
 290:	8f 93       	push	r24
 292:	9f 93       	push	r25
 294:	af 93       	push	r26
 296:	bf 93       	push	r27
 298:	ef 93       	push	r30
 29a:	ff 93       	push	r31
	if(recive_counter < RX_BUFFER_SIZE){
 29c:	40 91 00 01 	lds	r20, 0x0100
 2a0:	40 32       	cpi	r20, 0x20	; 32
 2a2:	d8 f5       	brcc	.+118    	; 0x31a <__vector_18+0xa0>
		usart_rx_bufor[usart_rx_bufor_ind++] = UDR0;
 2a4:	80 91 22 01 	lds	r24, 0x0122
 2a8:	90 91 23 01 	lds	r25, 0x0123
 2ac:	9c 01       	movw	r18, r24
 2ae:	2f 5f       	subi	r18, 0xFF	; 255
 2b0:	3f 4f       	sbci	r19, 0xFF	; 255
 2b2:	30 93 23 01 	sts	0x0123, r19
 2b6:	20 93 22 01 	sts	0x0122, r18
 2ba:	20 91 c6 00 	lds	r18, 0x00C6
 2be:	fc 01       	movw	r30, r24
 2c0:	ea 5d       	subi	r30, 0xDA	; 218
 2c2:	fe 4f       	sbci	r31, 0xFE	; 254
 2c4:	20 83       	st	Z, r18
		recive_counter++;
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	84 0f       	add	r24, r20
 2ca:	80 93 00 01 	sts	0x0100, r24
		
		if(recive_counter == 1)
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	19 f4       	brne	.+6      	; 0x2d8 <__vector_18+0x5e>
	TCCR0B &= ~((1 << CS02) | (1 << CS01) | (1 << CS00));					// Prescaler
}
//--------------------------------------------------------------
void reset_timer0(void)
{
	TCNT0 = 0;																// Reset counter
 2d2:	16 bc       	out	0x26, r1	; 38
		recive_counter++;
		
		if(recive_counter == 1)
		{
			reset_timer0();
			enable_timer0();
 2d4:	ca df       	rcall	.-108    	; 0x26a <enable_timer0>
 2d6:	28 c0       	rjmp	.+80     	; 0x328 <__vector_18+0xae>
		}
		else if(recive_counter < 3)
 2d8:	83 30       	cpi	r24, 0x03	; 3
 2da:	10 f4       	brcc	.+4      	; 0x2e0 <__vector_18+0x66>
	TCCR0B &= ~((1 << CS02) | (1 << CS01) | (1 << CS00));					// Prescaler
}
//--------------------------------------------------------------
void reset_timer0(void)
{
	TCNT0 = 0;																// Reset counter
 2dc:	16 bc       	out	0x26, r1	; 38
 2de:	24 c0       	rjmp	.+72     	; 0x328 <__vector_18+0xae>
		}
		else if(recive_counter < 3)
		{
			reset_timer0();
		}
		else if(usart_rx_bufor_ind - 3 < usart_rx_bufor[MSG_DATA_LENGTH])		// Data
 2e0:	20 91 22 01 	lds	r18, 0x0122
 2e4:	30 91 23 01 	lds	r19, 0x0123
 2e8:	80 91 28 01 	lds	r24, 0x0128
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	23 50       	subi	r18, 0x03	; 3
 2f0:	31 09       	sbc	r19, r1
 2f2:	28 17       	cp	r18, r24
 2f4:	39 07       	cpc	r19, r25
 2f6:	10 f4       	brcc	.+4      	; 0x2fc <__vector_18+0x82>
	TCCR0B &= ~((1 << CS02) | (1 << CS01) | (1 << CS00));					// Prescaler
}
//--------------------------------------------------------------
void reset_timer0(void)
{
	TCNT0 = 0;																// Reset counter
 2f8:	16 bc       	out	0x26, r1	; 38
 2fa:	16 c0       	rjmp	.+44     	; 0x328 <__vector_18+0xae>
		}
		else if(usart_rx_bufor_ind - 3 < usart_rx_bufor[MSG_DATA_LENGTH])		// Data
		{
			reset_timer0();
		}
		else if(usart_rx_bufor_ind - 4 < usart_rx_bufor[MSG_DATA_LENGTH])		// CRC
 2fc:	20 91 22 01 	lds	r18, 0x0122
 300:	30 91 23 01 	lds	r19, 0x0123
 304:	24 50       	subi	r18, 0x04	; 4
 306:	31 09       	sbc	r19, r1
 308:	28 17       	cp	r18, r24
 30a:	39 07       	cpc	r19, r25
 30c:	10 f4       	brcc	.+4      	; 0x312 <__vector_18+0x98>
	TCCR0B &= ~((1 << CS02) | (1 << CS01) | (1 << CS00));					// Prescaler
}
//--------------------------------------------------------------
void reset_timer0(void)
{
	TCNT0 = 0;																// Reset counter
 30e:	16 bc       	out	0x26, r1	; 38
 310:	0b c0       	rjmp	.+22     	; 0x328 <__vector_18+0xae>
		{
			reset_timer0();
		}
		else																	//success
		{
			disable_timer0();
 312:	af df       	rcall	.-162    	; 0x272 <disable_timer0>
			recive_counter = 0;
 314:	10 92 00 01 	sts	0x0100, r1
 318:	07 c0       	rjmp	.+14     	; 0x328 <__vector_18+0xae>
		}
		
	}
	else																		// To many received data, it is error
	{
		disable_timer0();														// Clear all data
 31a:	ab df       	rcall	.-170    	; 0x272 <disable_timer0>
		recive_counter = 0;
 31c:	10 92 00 01 	sts	0x0100, r1
		usart_rx_bufor_ind = 0;													// Clear all data
 320:	10 92 23 01 	sts	0x0123, r1
 324:	10 92 22 01 	sts	0x0122, r1
	}
}
 328:	ff 91       	pop	r31
 32a:	ef 91       	pop	r30
 32c:	bf 91       	pop	r27
 32e:	af 91       	pop	r26
 330:	9f 91       	pop	r25
 332:	8f 91       	pop	r24
 334:	7f 91       	pop	r23
 336:	6f 91       	pop	r22
 338:	5f 91       	pop	r21
 33a:	4f 91       	pop	r20
 33c:	3f 91       	pop	r19
 33e:	2f 91       	pop	r18
 340:	0f 90       	pop	r0
 342:	0f be       	out	0x3f, r0	; 63
 344:	0f 90       	pop	r0
 346:	1f 90       	pop	r1
 348:	18 95       	reti

0000034a <__vector_14>:
{
	TCNT0 = 0;																// Reset counter
}
//--------------------------------------------------------------
ISR (TIMER0_COMPA_vect)														// Failed transmission
{
 34a:	1f 92       	push	r1
 34c:	0f 92       	push	r0
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	0f 92       	push	r0
 352:	11 24       	eor	r1, r1
 354:	2f 93       	push	r18
 356:	3f 93       	push	r19
 358:	4f 93       	push	r20
 35a:	5f 93       	push	r21
 35c:	6f 93       	push	r22
 35e:	7f 93       	push	r23
 360:	8f 93       	push	r24
 362:	9f 93       	push	r25
 364:	af 93       	push	r26
 366:	bf 93       	push	r27
 368:	ef 93       	push	r30
 36a:	ff 93       	push	r31
	disable_timer0();
 36c:	82 df       	rcall	.-252    	; 0x272 <disable_timer0>
	recive_counter = 0;														// Clear All buffers
 36e:	10 92 00 01 	sts	0x0100, r1
	usart_rx_bufor_ind = 0;													// Clear All buffers
 372:	10 92 23 01 	sts	0x0123, r1
 376:	10 92 22 01 	sts	0x0122, r1
	
}
 37a:	ff 91       	pop	r31
 37c:	ef 91       	pop	r30
 37e:	bf 91       	pop	r27
 380:	af 91       	pop	r26
 382:	9f 91       	pop	r25
 384:	8f 91       	pop	r24
 386:	7f 91       	pop	r23
 388:	6f 91       	pop	r22
 38a:	5f 91       	pop	r21
 38c:	4f 91       	pop	r20
 38e:	3f 91       	pop	r19
 390:	2f 91       	pop	r18
 392:	0f 90       	pop	r0
 394:	0f be       	out	0x3f, r0	; 63
 396:	0f 90       	pop	r0
 398:	1f 90       	pop	r1
 39a:	18 95       	reti

0000039c <_exit>:
 39c:	f8 94       	cli

0000039e <__stop_program>:
 39e:	ff cf       	rjmp	.-2      	; 0x39e <__stop_program>
